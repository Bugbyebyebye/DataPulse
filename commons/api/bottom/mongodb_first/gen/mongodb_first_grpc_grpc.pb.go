// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: mongodb_first_grpc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoDbFirstServiceClient is the client API for MongoDbFirstService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoDbFirstServiceClient interface {
	GetMongoDbFirstData(ctx context.Context, in *MongoFirstReq, opts ...grpc.CallOption) (*MongoFirstRes, error)
}

type mongoDbFirstServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDbFirstServiceClient(cc grpc.ClientConnInterface) MongoDbFirstServiceClient {
	return &mongoDbFirstServiceClient{cc}
}

func (c *mongoDbFirstServiceClient) GetMongoDbFirstData(ctx context.Context, in *MongoFirstReq, opts ...grpc.CallOption) (*MongoFirstRes, error) {
	out := new(MongoFirstRes)
	err := c.cc.Invoke(ctx, "/grpc.MongoDbFirstService/GetMongoDbFirstData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDbFirstServiceServer is the server API for MongoDbFirstService service.
// All implementations must embed UnimplementedMongoDbFirstServiceServer
// for forward compatibility
type MongoDbFirstServiceServer interface {
	GetMongoDbFirstData(context.Context, *MongoFirstReq) (*MongoFirstRes, error)
	mustEmbedUnimplementedMongoDbFirstServiceServer()
}

// UnimplementedMongoDbFirstServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMongoDbFirstServiceServer struct {
}

func (UnimplementedMongoDbFirstServiceServer) GetMongoDbFirstData(context.Context, *MongoFirstReq) (*MongoFirstRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMongoDbFirstData not implemented")
}
func (UnimplementedMongoDbFirstServiceServer) mustEmbedUnimplementedMongoDbFirstServiceServer() {}

// UnsafeMongoDbFirstServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDbFirstServiceServer will
// result in compilation errors.
type UnsafeMongoDbFirstServiceServer interface {
	mustEmbedUnimplementedMongoDbFirstServiceServer()
}

func RegisterMongoDbFirstServiceServer(s grpc.ServiceRegistrar, srv MongoDbFirstServiceServer) {
	s.RegisterService(&MongoDbFirstService_ServiceDesc, srv)
}

func _MongoDbFirstService_GetMongoDbFirstData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoFirstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDbFirstServiceServer).GetMongoDbFirstData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MongoDbFirstService/GetMongoDbFirstData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDbFirstServiceServer).GetMongoDbFirstData(ctx, req.(*MongoFirstReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDbFirstService_ServiceDesc is the grpc.ServiceDesc for MongoDbFirstService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDbFirstService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MongoDbFirstService",
	HandlerType: (*MongoDbFirstServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMongoDbFirstData",
			Handler:    _MongoDbFirstService_GetMongoDbFirstData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongodb_first_grpc.proto",
}
