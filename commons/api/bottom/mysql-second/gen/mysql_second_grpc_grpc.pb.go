// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: mysql_second_grpc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MysqlSecondServiceClient is the client API for MysqlSecondService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MysqlSecondServiceClient interface {
	GetMysqlSecondData(ctx context.Context, in *MysqlSecondReq, opts ...grpc.CallOption) (*MysqlSecondRes, error)
}

type mysqlSecondServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlSecondServiceClient(cc grpc.ClientConnInterface) MysqlSecondServiceClient {
	return &mysqlSecondServiceClient{cc}
}

func (c *mysqlSecondServiceClient) GetMysqlSecondData(ctx context.Context, in *MysqlSecondReq, opts ...grpc.CallOption) (*MysqlSecondRes, error) {
	out := new(MysqlSecondRes)
	err := c.cc.Invoke(ctx, "/grpc.MysqlSecondService/GetMysqlSecondData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlSecondServiceServer is the server API for MysqlSecondService service.
// All implementations must embed UnimplementedMysqlSecondServiceServer
// for forward compatibility
type MysqlSecondServiceServer interface {
	GetMysqlSecondData(context.Context, *MysqlSecondReq) (*MysqlSecondRes, error)
	mustEmbedUnimplementedMysqlSecondServiceServer()
}

// UnimplementedMysqlSecondServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMysqlSecondServiceServer struct {
}

func (UnimplementedMysqlSecondServiceServer) GetMysqlSecondData(context.Context, *MysqlSecondReq) (*MysqlSecondRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMysqlSecondData not implemented")
}
func (UnimplementedMysqlSecondServiceServer) mustEmbedUnimplementedMysqlSecondServiceServer() {}

// UnsafeMysqlSecondServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MysqlSecondServiceServer will
// result in compilation errors.
type UnsafeMysqlSecondServiceServer interface {
	mustEmbedUnimplementedMysqlSecondServiceServer()
}

func RegisterMysqlSecondServiceServer(s grpc.ServiceRegistrar, srv MysqlSecondServiceServer) {
	s.RegisterService(&MysqlSecondService_ServiceDesc, srv)
}

func _MysqlSecondService_GetMysqlSecondData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MysqlSecondReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlSecondServiceServer).GetMysqlSecondData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MysqlSecondService/GetMysqlSecondData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlSecondServiceServer).GetMysqlSecondData(ctx, req.(*MysqlSecondReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MysqlSecondService_ServiceDesc is the grpc.ServiceDesc for MysqlSecondService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MysqlSecondService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MysqlSecondService",
	HandlerType: (*MysqlSecondServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMysqlSecondData",
			Handler:    _MysqlSecondService_GetMysqlSecondData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysql_second_grpc.proto",
}
